from code import hw1
import pytest
import numpy
import os


@pytest.fixture
def exercise_results():
    return hw1.exercise_6('data/walk.txt', 'figures/walk.png')


WALK_DATA = \
    [2.78077031,  4.48440666,  4.6845704 ,  6.31162829,  7.07625351,
        6.95587134,  7.15687628,  7.34279392,  8.3835007 ,  7.52592236,
        9.50971869,  8.94173515,  9.65874619,  8.67101364,  7.95775054,
        6.85324019,  6.35734346,  6.05169659,  6.10702282,  8.17473992,
        6.06074856,  5.66837874,  5.80670781,  5.63474636,  6.0977729 ,
        5.5695041 ,  5.29970709,  3.88694536,  2.93322498,  3.29188049,
        3.41557005,  4.9382339 ,  5.30264847,  7.19361415,  7.285315  ,
        7.10421994,  7.61116717,  7.82680657,  8.18491645,  8.80216693,
       10.08419959, 10.6983413 ,  9.71949287,  8.3203715 ,  8.37843537,
        9.21547004, 10.71289865, 11.83107561, 11.65445369, 12.70594913,
       15.01954432, 15.09413319, 16.6991902 , 15.58850162, 16.25010877,
       16.36736229, 14.59699122, 14.2000673 , 13.96106086, 13.34719251,
       13.50386148, 12.96692249, 11.82480702, 10.79182989, 10.68246261,
       12.27630087, 12.7530961 , 11.92371596, 10.40926121, 10.08381591,
       12.09471681, 11.41457848, 12.99234283, 11.7951343 , 10.21456473,
       10.14488898,  9.82869819, 10.52759161,  9.06795257, 10.11510285,
        9.94006167,  9.97686355, 10.28077473, 10.8496469 ,  8.79527321,
        9.37304813,  9.11422609,  6.868337  ,  7.46329129,  8.26766866,
        7.60817525,  7.59062877,  7.12842149,  5.5224693 ,  5.53275167,
        3.9414053 ,  3.66823644,  5.47718711,  6.32005517,  5.71957791]


WALK_DATA_SCALED = \
    [-2.        , -1.38799218, -1.31608612, -0.73158806, -0.45690702,
       -0.50015265, -0.42794441, -0.36115606,  0.01270347, -0.2953697 ,
        0.41728171,  0.21324148,  0.47081779,  0.11598852, -0.14024139,
       -0.53702147, -0.71516552, -0.82496493, -0.80508975, -0.06229096,
       -0.82171314, -0.96266657, -0.91297377, -0.97474854, -0.80841266,
       -0.99818592, -1.09510677, -1.6026219 , -1.94523276, -1.81639073,
       -1.77195697, -1.22496102, -1.09405012, -0.41474683, -0.38180457,
       -0.44686047, -0.26474668, -0.18728121, -0.05863518,  0.16310352,
        0.62365604,  0.84427796,  0.49264019, -0.00997483,  0.01088382,
        0.31157695,  0.84950749,  1.25119711,  1.18774813,  1.56548333,
        2.39661043,  2.42340545,  3.        ,  2.60100048,  2.8386737 ,
        2.88079541,  2.24481407,  2.10222463,  2.01636487,  1.79584115,
        1.85212232,  1.65923441,  1.2489452 ,  0.87786245,  0.83857376,
        1.41113813,  1.58242023,  1.28447687,  0.74042993,  0.62351821,
        1.34590657,  1.10157627,  1.66836631,  1.23828569,  0.67048791,
        0.64545787,  0.53187069,  0.78293849,  0.25858334,  0.63475761,
        0.57187648,  0.58509705,  0.69427294,  0.89863241,  0.16062705,
        0.36818471,  0.27520647, -0.53159815, -0.31786905, -0.02890759,
       -0.26582149, -0.27212482, -0.4381664 , -1.01508253, -1.01138873,
       -1.58305792, -1.68119006, -1.03134953, -0.72856082, -0.94427398]


def test_read_walk(exercise_results):
    walk_arr, _, _, _ = exercise_results
    target = numpy.array(WALK_DATA)

    print(f'>>>> {len(target)} == {len(walk_arr)}')
    for i in range(len(target)):
        print(f'>> {target[i]} == {walk_arr[i]} : {target[i] == walk_arr[i]}')

    assert numpy.allclose(walk_arr, target)  # numpy.array_equal(walk_arr, target)


def test_walk_figure_exists():
    assert os.path.exists('figures/walk.png')


def test_min_max(exercise_results):
    _, walk_min, walk_max, _ = exercise_results
    assert walk_min == pytest.approx(2.780770305688397)
    assert walk_max == pytest.approx(16.699190200930882)


def test_(exercise_results):
    _, _, _, walk_arr_scaled = exercise_results
    target = numpy.array(WALK_DATA_SCALED)
    assert numpy.allclose(walk_arr_scaled, target)


def test_docstring():
    """
    You must always document your code!
    You must provide a descriptive docstring for
    the exercise_6 function.
    """
    assert hw1.exercise_6.__doc__ is not None
